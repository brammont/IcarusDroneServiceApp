# Icarus Drone Service – Limitations & Lessons Learned

**Version:** 1.0  
**Last Updated:** 2025-06-02  

---

## Table of Contents

1. [Overview](#overview)  
2. [Limitations](#limitations)  
   - [1. In-Memory Data Only](#1-in-memory-data-only)  
   - [2. Single-User Desktop Only](#2-single-user-desktop-only)  
   - [3. No Authentication/Authorization](#3-no-authenticationauthorization)  
   - [4. Limited Validation/Business Rules](#4-limited-validationbusiness-rules)  
   - [5. Basic UI/UX](#5-basic-uiux)  
   - [6. Documentation Gaps](#6-documentation-gaps)  
3. [Lessons Learned](#lessons-learned)  
   - [1. Importance of Early Data Persistence Strategy](#1-importance-of-early-data-persistence-strategy)  
   - [2. Planning for “Update” vs. “Add” Workflows Up-Front](#2-planning-for-update-vs-add-workflows-up-front)  
   - [3. WPF Data Binding Best Practices](#3-wpf-data-binding-best-practices)  
   - [4. Trace Logging and Debugging](#4-trace-logging-and-debugging)  
   - [5. DocFX Setup Is Non-trivial](#5-docfx-setup-is-non-trivial)  
   - [6. Value of Small, Atomic Issues](#6-value-of-small-atomic-issues)  
   - [7. UI/UX Edge Cases](#7-uiux-edge-cases)  
   - [8. Working with NumericUpDown Controls](#8-working-with-numericupdown-controls)  
   - [9. XML Documentation to Drive Automated Builds](#9-xml-documentation-to-drive-automated-builds)  
   - [10. Time Management & Scope](#10-time-management--scope)  

---

## Overview

This document summarizes the **current limitations** of the Icarus Drone Service application and the **key lessons learned** during its development—including both the WPF desktop client and the accompanying documentation process (DocFX). Use these insights to (a) recognize what remains to be improved in a production-grade version and (b) guide future architectural or process decisions.

---

## Limitations

### 1. In-Memory Data Only  
- **Description:** All job queues (Regular, Express) and the Finished Jobs list exist solely in memory—using `Queue<Drone>` and `List<Drone>`.  
- **Impact:** Any pending or completed jobs will be lost if the user closes the application, experiences a crash, or restarts the machine.  
- **Mitigation/Future Work:** Implement persistent storage (for example, use SQLite, a local JSON/XML file, or a cloud-based datastore). On startup, load any previously saved jobs; on shutdown or at strategic intervals, serialize the in-memory collections.

### 2. Single-User Desktop Only  
- **Description:** The WPF application is designed for one user on one Windows machine. There is no networked back end or centralized server process.  
- **Impact:** Multiple technicians cannot share a common job queue; each desktop instance is isolated. In team settings, one technician’s “Process” actions do not automatically sync with another’s view.  
- **Mitigation/Future Work:** Rearchitect as a client/server or web-based solution (e.g., ASP.NET Core Web API + Blazor or React front-end). This would allow multiple users to authenticate and work against a single, shared datastore.

### 3. No Authentication/Authorization  
- **Description:** Any user who can open the application can perform all actions (add, update, process, remove finished jobs).  
- **Impact:** There is no concept of “roles” (e.g., only managers can delete finished jobs, only technicians can process Express jobs). This could lead to accidental or unauthorized modifications.  
- **Mitigation/Future Work:** Introduce a simple login screen with role selection, then disable/enable certain buttons based on role. For a production version, integrate with Active Directory, OAuth, or a custom user database.

### 4. Limited Validation/Business Rules  
- **Description:** Aside from requiring Cost > 0 (max two decimal places) and enforcing unique `ServiceTag` values, there is no additional domain or SLA logic.  
  1. No check on how many open jobs a single client can have.  
  2. No enforcement of turnaround times (e.g., Express = 24 hours).  
  3. No support for “parts inventory” or “repair steps.”  
- **Impact:** Without more complex rules, the system may accept invalid or incomplete data. For instance, two jobs with the same `DroneModel` but no linkage to actual hardware parts.  
- **Mitigation/Future Work:**  
  1. Add a business-rules layer or validate at the repository level.  
  2. Introduce domain models for Parts, Technicians, and SLA metrics.  
  3. Implement a “status” enum with more states (e.g., “Awaiting Parts,” “Quality Check,” etc.).

### 5. Basic UI/UX  
- **Description:** The current WPF design uses `ListView` + `GridView` for Regular/Express queues and a simple `ListView` (string formatting) for Finished Jobs. There is no paging, filtering, or sorting.  
- **Impact:** Once hundreds of jobs accumulate, listing performance degrades, and users cannot easily search or filter the queue.  
- **Mitigation/Future Work:**  
  1. Replace the Finished Jobs `ListView` with a `GridView` and bind to multiple properties (Tag, Client, Cost, Priority).  
  2. Introduce filtering controls (e.g., TextBox to search by ClientName or drop-down to filter by Priority).  
  3. Implement paging or virtualized scrolling (e.g., use WPF’s `VirtualizingStackPanel` or a third-party control).

### 6. Documentation Gaps  
- **Description:** Although DocFX was configured to generate public API documentation and a basic homepage, deeper design artifacts are missing:  
  - No UML class or sequence diagrams.  
  - No architectural decision records (ADRs) or component diagrams.  
  - No automated build/test pipeline.  
- **Impact:** For external stakeholders (new developers, auditors), understanding how classes interact or why certain design decisions were made is difficult.  
- **Mitigation/Future Work:**  
  1. Embed PlantUML or Mermaid diagrams directly into Markdown pages.  
  2. Add an `/docs/articles/architecture.md` file describing high-level components (Models, Repository, View, ViewModel if MVVM were used).  
  3. Adopt a CI/CD pipeline (e.g., GitHub Actions) that builds, tests, and deploys both the WPF app and the DocFX site.

---

## Lessons Learned

### 1. Importance of Early Data Persistence Strategy  
- **Observation:** Relying exclusively on in-memory collections seemed simplest at first. However, mid-development, it became clear that a live demo (showing saved job lists across sessions) required a persistence plan.  
- **Lesson:** Before implementing UI features, identify whether data should survive application restarts. If so, choose a lightweight approach (e.g., local JSON file) or a full database.

### 2. Planning for “Update” vs. “Add” Workflows Up-Front  
- **Observation:** Implementing “Update Selected Job” late in the sprint required careful handling of where in the queue the edited item should go (retain original priority, tag, or reorder?).  
- **Lesson:** Sketch CRUD flows on paper or in a whiteboard diagram before starting to code. Clearly document whether updating a queued item changes its position, priority, or both.

### 3. WPF Data Binding Best Practices  
- **Observation:** Initially, the Finished Jobs list used a `ListBox` bound to `IEnumerable<string> (Display())`. When adding “Client,” “Cost,” and now “Priority” to Finished, it became unwieldy to keep formatting.  
- **Lesson:** Whenever you anticipate more than one field in a list, start with `ListView` + `GridView`. That separation of concerns (one column per bound property) is much easier to maintain and style.

### 4. Trace Logging and Debugging  
- **Observation:** The bug where Express jobs would not immediately show up in Finished only manifested when switching tabs quickly. Without logging, it was tedious to track which code path failed to refresh.  
- **Lesson:** Add `Trace.TraceInformation` or `Trace.TraceWarning` statements around every major step: “Tag read,” “Tag increment,” “Enqueue Regular,” “Enqueue Express,” “Dequeue,” “Refresh UI,” etc. Reviewing the Output window in Visual Studio reveals the exact sequence of operations.

### 5. DocFX Setup Is Non-trivial  
- **Observation:** Configuring `docfx.json` to point at the correct `.csproj` path (`IcarusDroneServiceApp/IcarusDroneServiceApp.csproj`) and updating `toc.yml` to reference `api/index` (not raw `.yml` or `.md`) took several iterations.  
- **Lesson:** Place `docfx.json` at the **solution root**. Under `metadata → src`, point to the relative path of the WPF project folder. In `toc.yml`, use `href: api/index` (no `.md` or `.yml` extension). Always run `docfx metadata` first, then `docfx build`.

### 6. Value of Small, Atomic Issues  
- **Observation:** Breaking each UI or code fix into its own GitHub Issue (e.g., “Issue #01 – Round Cost to Two Decimals,” “Issue #02 – Duplicate Tag Check,” etc.) made it easier to review changes, track progress, and revert a single feature if needed.  
- **Lesson:** On any team project, name issues clearly and keep each issue scope to a single change. This encourages one-to-one mapping between requirements, code changes, and unit tests.

### 7. UI/UX Edge Cases  
- **Observation:** Initially, the “Process Regular” and “Process Express” buttons were always enabled if any queue had items—regardless of which tab was active. Consequently, a technician on the Express tab might accidentally click “Process Regular” (even if no Regular item was selected).  
- **Lesson:** Disable a process button unless an item is explicitly selected in the matching list. In WPF, handle each `SelectionChanged` event to toggle the corresponding button’s `IsEnabled` property.

### 8. Working with NumericUpDown Controls  
- **Observation:** Using the Extended WPF Toolkit’s `IntegerUpDown` for `ServiceTag` was convenient for enforcing a numeric range (100–900). However, programmatically setting `numTag.Value = d.ServiceTag` in selection handlers triggered the `ValueChanged` event and inadvertently called our “increment logic.”  
- **Lesson:** When reloading an existing job into the form for editing, temporarily detach the `ValueChanged` event handler (or use a boolean “updating” flag) so the UI assignment does not auto-increment. Always test both manual user changes and code-driven changes for side effects.

### 9. XML Documentation to Drive Automated Builds  
- **Observation:** DocFX only includes members that have XML `<summary>` (and `<param>`, `<returns>`) comments enabled. Without turning on “Generate XML documentation file” in the WPF project’s Build → Output settings, the `api/` folder contained empty stubs.  
- **Lesson:** Immediately enable the “XML documentation file” checkbox in Project → Properties → Build. Add `<DocumentationFile>bin\Debug\net8.0-windows\IcarusDroneServiceApp.xml</DocumentationFile>` to your `.csproj` (if manual). Then, write `<summary>`, `<param>`, and `<returns>` tags for each public class, property, and method.

### 10. Time Management & Scope  
- **Observation:** As “nice-to-have” features (e.g., drag-and-drop reordering, multi-tenant security, real-time status updates) were brainstormed, the project scope threatened to exceed the allotted timeframe.  
- **Lesson:** Prioritize core functionality first—implement “Add Job,” “Process Job,” and “View Finished Jobs” before tackling UI polishing or advanced documentation. Record extra ideas as backlog items (e.g., in your issue board under “Future Enhancements”) rather than stacking them onto the current deliverable.

---

## “Next Steps” (Future Enhancements)

1. **Persistent Data Store**  
   - Integrate SQLite or a lightweight JSON database. Automatically load from file on startup, and save on each job enqueue/dequeue.

2. **Login & Role-Based Permissions**  
   - Create a simple login form. Define at least two roles:  
     - **Technician:** Can view, add, update, and process jobs.  
     - **Manager:** Can also remove finished jobs, delete or reassign open jobs.

3. **Enhanced UI/UX**  
   - Replace the Finished Jobs `ListView` (string‐only) with a `ListView` using a `GridView` (columns: Tag, Client, Cost, Priority, Timestamp).  
   - Add “Search by Client Name” and “Filter by Priority” controls.  
   - Enable column sorting (e.g., clicking on “Cost” sorts ascending/descending).

4. **Automated Testing & CI/CD**  
   - Write unit tests for:  
     - `Drone` model (e.g., `ServiceProblem` capitalization logic).  
     - `ServiceRepository` (if refactored to use a repository abstraction).  
     - `IcarusDrone.xaml.cs` event handlers (where logic can be extracted into testable classes).  
   - Add a GitHub Actions workflow that runs `dotnet build`, `dotnet test`, and `docfx build` on each push to `main`.

5. **Architecture & Design Docs**  
   - Add a `/docs/architecture.md` describing high-level components, data flows, and dependencies (e.g., “Models → Views → ViewModels if MVVM is chosen”).  
   - Include a UML class diagram (using PlantUML or Mermaid), embedded in the Markdown content.

---

> **Prepared by:**  
> **Brayam Mazue**  
> **Icarus Drone Service Application**  
> **Date:** 2025-06-02  

